" vim.conf
" jessy@jessywilliams.com


" Functions --------------------------------------------------------------------

" fill rest of line with characters
function! SectionComment()
  let str = '-'
  let tw = &textwidth
  if tw==0 | let tw = 80 | endif
  .s/[[:space:]]*$//
  let reps = (tw - col("$")) / len(str)
  if reps > 0
    .s/$/\=(' '.repeat(str, reps))/
  endif
endfunction

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

function! g:BuffetSetCustomColors()
  hi! BuffetCurrentBuffer cterm=NONE ctermbg=2 ctermfg=0
  hi! BuffetActiveBuffer cterm=NONE ctermbg=0 ctermfg=2
  hi! BuffetBuffer cterm=NONE ctermbg=0 ctermfg=8
  hi! BuffetModCurrentBuffer cterm=NONE ctermbg=3 ctermfg=0
  hi! BuffetModActiveBuffer cterm=NONE ctermbg=0 ctermfg=3
  hi! BuffetModBuffer cterm=NONE ctermbg=0 ctermfg=8
  hi! ButterTrunc cterm=NONE ctermbg=0 ctermfg=8
  hi! BuffetTab cterm=NONE ctermbg=0 ctermfg=3
endfunction


" Plugins ----------------------------------------------------------------------

" vim-plug config
call plug#begin('~/.vim/plugged')
Plug 'airblade/vim-gitgutter'
Plug 'antoinemadec/FixCursorHold.nvim'
Plug 'chr4/nginx.vim'
Plug 'craigemery/vim-autotag'
Plug 'danro/rename.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'moll/vim-bbye'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tomasiser/vim-code-dark'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sleuth'
Plug 'kassio/neoterm'
Plug 'vim-airline/vim-airline'
call plug#end()


" Commands ---------------------------------------------------------------------

" autoload vimrc on change
if has("autocmd")
    autocmd bufwritepost .vimrc,vim.conf source $MYVIMRC
endif


" Options ----------------------------------------------------------------------

let g:coc_global_extensions = [
    \ 'coc-clangd',
    \ 'coc-cmake',
    \ 'coc-css',
    \ 'coc-fzf-preview',
    \ 'coc-highlight',
    \ 'coc-html',
    \ 'coc-json',
    \ 'coc-python',
    \ 'coc-sh',
    \ 'coc-vetur',
    \ 'coc-xml',
    \ 'coc-yaml'
  \ ]

" file handling
set autoread
set hidden
set nobackup
set modelines=1
set exrc

" lines
set number

" mouse support
set mouse=a

" searching
set ignorecase smartcase

" syntax highlighting
syntax on
highlight GitGutterAdd ctermfg=32
highlight GitGutterChange ctermfg=32
highlight GitGutterChange ctermfg=32

" ruler
set wrap
highlight ColorColumn ctermbg=grey

" colour scheme
silent! colorscheme codedark

" cursors
let &t_EI = "\e[2 q"
let &t_SI = "\e[6 q"

" clipboard
set clipboard+=unnamedplus

" wrap
set nocompatible
set noshowmode
set noswapfile
set showmatch
noremap j gj
noremap k gk

let g:buffer_show_index=1

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#ormatter = 'unique_tail'
let g:airline#extensions#tabline#buffer_idx_mode = 1

" splittings
set splitbelow
set splitright

" fuzzy finding
let g:fzf_preview_buffers_jump = 1

" neoterm
let g:neoterm_keep_term_open = 1
let g:neoterm_autojump = 1
let g:neoterm_default_mod = 'belowright'


" Key Bindings -----------------------------------------------------------------

" clear plugin key mappings
mapclear

" leader key override
let mapleader="\<tab>"

" clear search highlights
nnoremap <silent> <CR> :nohlsearch<CR><CR>

" fuzzy finding
nnoremap          ;/ :CocCommand fzf-preview.ProjectGrep<Space>
xnoremap          ;/ "sy:CocCommand   fzf-preview.ProjectGrep<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
nnoremap <silent> ;p :CocCommand fzf-preview.ProjectFiles<CR>
nnoremap <silent> ;j :CocCommand fzf-preview.Jumps<CR>
nnoremap <silent> ;m :CocCommand fzf-preview.ProjectMruFiles<CR>
nnoremap <silent> ;b :CocCommand fzf-preview.Buffers<CR>

" file management
noremap <silent> <leader>c :enew<CR>
noremap <silent> <leader>w :clo<CR>
noremap <silent> <leader>q :Bdelete<CR>
noremap <silent> <C-p> :FZF<CR>

"buffers
nmap <leader>t :tab split<CR>
nmap <leader>s :mksession! .vs<CR>

" gutters
nmap <leader>g :GitGutterToggle<CR>
nmap <leader>l :set invnumber<CR>

" auto formatting
nmap ;f :CocCommand prettier.formatFile<CR>

" moving around
nmap <leader>d <Plug>(coc-definition)
nmap <leader>h :call <SID>show_documentation()<CR>
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

" jump sentences w/o shift
nmap 9 (
nmap 0 )

" splits
noremap <leader>- :sb<CR>
noremap <leader><bslash> :vertical sb<CR>

" terminal
noremap <leader>v :Ttoggle<CR>
tnoremap <Esc> <C-\><C-n>

" autocomplete
imap <expr><TAB> pumvisible() ? "\<Down>" : "\<TAB>"

let g:run_command='echo "no run command specified"'
nnoremap <silent>;r :exec "!" . g:run_command<CR>

" vim: set ft=vim:
